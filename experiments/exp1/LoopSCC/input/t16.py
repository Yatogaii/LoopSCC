from cfg import CFG
from int import INT
from pfg import PFG
from summarizer import Summarizer

x, y, z = INT.define_int("x"), INT.define_int("y"), INT.define_int("z")

loop = CFG.define_loop([[x > y]], [
    (
        (x, x - y - 1),
        (z, 100 + 2 * y),
    ),
    [
        ([[z > 0]], [
            (
                (z, 0),
            )
        ]),
        ([[z <= 0]], [
            ()
        ]),
    ],
])

pfg = PFG(loop)
summarizer = Summarizer(pfg)
summarizer.summarize()
# y>=0
tests = [
    [(x, -6435040), (y, 8420968), ],
    [(x, 2089681), (y, 4643640), ],
    [(x, -5304944), (y, 3810429), ],
    [(x, 785806), (y, 7500619), ],
    [(x, 4177759), (y, 4258097), ],
    [(x, 3287270), (y, 6403734), ],
    [(x, 8469177), (y, 8504275), ],
    [(x, -2587902), (y, 7700022), ],
    [(x, -2679815), (y, 5439996), ],
    [(x, 2611138), (y, 9269457), ],
    [(x, -1553118), (y, 7278047), ],
    [(x, -280797), (y, 1991820), ],
    [(x, 532541), (y, 6950582), ],
    [(x, -1345452), (y, 9445827), ],
    [(x, -9104790), (y, 8766327), ],
    [(x, 2543903), (y, 5597903), ],
    [(x, 8766795), (y, 4166519), ],
    [(x, 7918902), (y, 8529670), ],
    [(x, -7752237), (y, 9349052), ],
    [(x, 8683278), (y, 8616592), ],
    [(x, -8001224), (y, 48053), ],
    [(x, 6526078), (y, 5569833), ],
    [(x, 7510211), (y, 4387148), ],
    [(x, -7300467), (y, 3145742), ],
    [(x, 4467516), (y, 1843140), ],
    [(x, 9468334), (y, 3550520), ],
    [(x, 2687090), (y, 7530863), ],
    [(x, 9810716), (y, 6789284), ],
    [(x, 8677204), (y, 4211740), ],
    [(x, 8420358), (y, 6270131), ],
    [(x, 9358923), (y, 6968420), ],
    [(x, -8837303), (y, 6138269), ],
    [(x, 3454474), (y, 3488523), ],
    [(x, -6171071), (y, 7961160), ],
    [(x, 5487211), (y, 7693278), ],
    [(x, 2868372), (y, 959475), ],
    [(x, 3596529), (y, 4604623), ],
    [(x, -9695604), (y, 9027478), ],
    [(x, -346859), (y, 3077712), ],
    [(x, -921957), (y, 2099063), ],
    [(x, -6572724), (y, 4588356), ],
    [(x, 5054172), (y, 263923), ],
    [(x, 3795145), (y, 6397092), ],
    [(x, 7398688), (y, 5111542), ],
    [(x, -8240608), (y, 8170181), ],
    [(x, 4669547), (y, 9936930), ],
    [(x, -8804616), (y, 2827874), ],
    [(x, 3735156), (y, 8563508), ],
    [(x, -1568180), (y, 435929), ],
    [(x, -1629973), (y, 7161606), ],
    [(x, -3354497), (y, 7279021), ],
    [(x, 2807075), (y, 5735577), ],
    [(x, 7939830), (y, 6328972), ],
    [(x, -6950610), (y, 5668278), ],
    [(x, -8492920), (y, 8879108), ],
    [(x, 5950194), (y, 1334571), ],
    [(x, -5908302), (y, 655759), ],
    [(x, -8115513), (y, 7111593), ],
    [(x, -5736359), (y, 4635593), ],
    [(x, 5311590), (y, 3196844), ],
    [(x, 325228), (y, 1065471), ],
    [(x, 1765816), (y, 1665122), ],
    [(x, 5922238), (y, 4975584), ],
    [(x, -1465866), (y, 3441147), ],
    [(x, 4131774), (y, 2167429), ],
    [(x, -477311), (y, 9815427), ],
    [(x, -9466646), (y, 6173688), ],
    [(x, 2666363), (y, 4383379), ],
    [(x, -6762360), (y, 7701416), ],
    [(x, -7364470), (y, 6585049), ],
    [(x, -8033292), (y, 9649788), ],
    [(x, -9769752), (y, 2976908), ],
    [(x, -2247565), (y, 6940719), ],
    [(x, -1756915), (y, 2951724), ],
    [(x, -3205075), (y, 831181), ],
    [(x, -7602162), (y, 6613625), ],
    [(x, 7704107), (y, 7549848), ],
    [(x, -2812776), (y, 380633), ],
    [(x, -1754773), (y, 2960994), ],
    [(x, 2280101), (y, 62943), ],
    [(x, -3365790), (y, 748553), ],
    [(x, -9343977), (y, 240835), ],
    [(x, 478489), (y, 2464619), ],
    [(x, -2149000), (y, 2810349), ],
    [(x, 1834572), (y, 8458539), ],
    [(x, -3226046), (y, 8636931), ],
    [(x, 3352889), (y, 7844656), ],
    [(x, -7415441), (y, 3636104), ],
    [(x, -4218982), (y, 3476599), ],
    [(x, -1114104), (y, 8996362), ],
    [(x, -4687357), (y, 1946698), ],
    [(x, 8895035), (y, 7250151), ],
    [(x, -3632673), (y, 933635), ],
    [(x, -7134260), (y, 1267629), ],
    [(x, -7011643), (y, 3524303), ],
    [(x, 7183237), (y, 9445633), ],
    [(x, -5924275), (y, 39775), ],
    [(x, -5873824), (y, 7090827), ],
    [(x, -4019215), (y, 8426882), ],
    [(x, 5688183), (y, 3853297), ],
]
for test in tests:
    result = summarizer.solve(test)
    x_val=0
    z_val=0

    if len(result) == 3:
        for each in result:
            if each[0] == 'x':
                x_val = each[1]
            if each[0] == 'z':
                z_val = each[1]
    else:
        for each in result:
            if each[0] == 'x':
                x_val = each[1]
        x_val = result[0][1]
        z_val = 0
    print(f"x = {x_val}")
    print(f"z = {z_val}")
