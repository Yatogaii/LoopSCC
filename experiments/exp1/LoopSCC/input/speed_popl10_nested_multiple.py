from cfg import CFG
from int import INT
from spath_graph import SPath_Graph
from summarizer import Summarizer

x, y, det = INT.define_int("x"), INT.define_int("y"), INT.define_int("det")

loop = CFG.define_loop([[x < 100]], [
    [
        ([[y < 30, det == 0]], [
            (
                (y, 30),
            )
        ]),
        ([[y >= 30], [det != 0]], [
            (
            )
        ]),
    ],
    (
        (x, x + 1),
    ),
])

spg = SPath_Graph(loop)
summarizer = Summarizer(spg)
summarizer.summarize()
tests = [
    [(x, 6978670), (y, -9617515), (det, 1), ],
    [(x, -4661191), (y, -9719594), (det, 1), ],
    [(x, -2540643), (y, -8752723), (det, 1), ],
    [(x, -4890244), (y, 3815887), (det, 1), ],
    [(x, -4717510), (y, 1939067), (det, 1), ],
    [(x, 7261688), (y, -507071), (det, 1), ],
    [(x, 8950263), (y, -642418), (det, 1), ],
    [(x, 4031310), (y, -3785491), (det, 1), ],
    [(x, 2054456), (y, -1374818), (det, 1), ],
    [(x, 9129963), (y, 9206288), (det, 1), ],
    [(x, -2117991), (y, 2895991), (det, 1), ],
    [(x, -6728598), (y, -78642), (det, 1), ],
    [(x, -9690284), (y, 5720989), (det, 1), ],
    [(x, 1072199), (y, 3732891), (det, 1), ],
    [(x, 647797), (y, -1904470), (det, 1), ],
    [(x, 4288860), (y, 6674303), (det, 1), ],
    [(x, 6534437), (y, -4644037), (det, 1), ],
    [(x, 8679597), (y, -7648621), (det, 1), ],
    [(x, -3338500), (y, -5206790), (det, 1), ],
    [(x, -8393811), (y, -5742279), (det, 1), ],
    [(x, 9454908), (y, 7577318), (det, 1), ],
    [(x, 4072228), (y, -5581725), (det, 1), ],
    [(x, -4996896), (y, 4964852), (det, 1), ],
    [(x, 6271641), (y, -9904214), (det, 1), ],
    [(x, 4960226), (y, 2897214), (det, 1), ],
    [(x, -508385), (y, 2862810), (det, 1), ],
    [(x, 6096425), (y, -7188790), (det, 1), ],
    [(x, -2944580), (y, 5726323), (det, 1), ],
    [(x, -7963662), (y, 3446312), (det, 1), ],
    [(x, -1654585), (y, -6030075), (det, 1), ],
    [(x, -399682), (y, 1964566), (det, 1), ],
    [(x, -4180765), (y, -4219307), (det, 1), ],
    [(x, -1075), (y, -4052284), (det, 1), ],
    [(x, -1997975), (y, -2756535), (det, 1), ],
    [(x, -7073031), (y, 6889088), (det, 1), ],
    [(x, -2822829), (y, -7805731), (det, 1), ],
    [(x, -3882757), (y, 3482840), (det, 1), ],
    [(x, 9253154), (y, 7701799), (det, 1), ],
    [(x, 9709713), (y, -110062), (det, 1), ],
    [(x, -9334965), (y, 7827029), (det, 1), ],
    [(x, 4638495), (y, -6943797), (det, 1), ],
    [(x, 2711000), (y, -1043041), (det, 1), ],
    [(x, 5125694), (y, 7674546), (det, 1), ],
    [(x, 3775941), (y, 5454635), (det, 1), ],
    [(x, -6870976), (y, -5586580), (det, 1), ],
    [(x, -4307097), (y, -2010096), (det, 1), ],
    [(x, -6489338), (y, -2553387), (det, 1), ],
    [(x, -1035526), (y, 7331395), (det, 1), ],
    [(x, 1373109), (y, -9132048), (det, 1), ],
    [(x, 1088538), (y, -1121099), (det, 1), ],
    [(x, -1530865), (y, 113131), (det, 0), ],
    [(x, -4017248), (y, 3564491), (det, 0), ],
    [(x, -9853314), (y, 1448318), (det, 0), ],
    [(x, -1025898), (y, -626962), (det, 0), ],
    [(x, -6458227), (y, -4361863), (det, 0), ],
    [(x, 6695338), (y, 2675991), (det, 0), ],
    [(x, 3586228), (y, -1099396), (det, 0), ],
    [(x, -7769122), (y, 8168684), (det, 0), ],
    [(x, -8661304), (y, 8459592), (det, 0), ],
    [(x, -5782957), (y, 6550527), (det, 0), ],
    [(x, -7607452), (y, -9322249), (det, 0), ],
    [(x, 3364044), (y, -8950565), (det, 0), ],
    [(x, 5438787), (y, 3056724), (det, 0), ],
    [(x, -6170829), (y, -1573248), (det, 0), ],
    [(x, 2972214), (y, 1578989), (det, 0), ],
    [(x, 3522550), (y, 7959031), (det, 0), ],
    [(x, -6282608), (y, 7981102), (det, 0), ],
    [(x, 4546227), (y, 2252280), (det, 0), ],
    [(x, -6955124), (y, -8054186), (det, 0), ],
    [(x, 3353892), (y, -3566949), (det, 0), ],
    [(x, 297695), (y, -9349673), (det, 0), ],
    [(x, 8930870), (y, 9927942), (det, 0), ],
    [(x, 3046706), (y, 8900910), (det, 0), ],
    [(x, -1155670), (y, -8341962), (det, 0), ],
    [(x, 6052427), (y, -3721186), (det, 0), ],
    [(x, -6201167), (y, -2560017), (det, 0), ],
    [(x, -6753699), (y, -1380219), (det, 0), ],
    [(x, -3227483), (y, -5244624), (det, 0), ],
    [(x, -9663455), (y, 3343377), (det, 0), ],
    [(x, 7992774), (y, -3393323), (det, 0), ],
    [(x, 8268315), (y, -8503506), (det, 0), ],
    [(x, -1926180), (y, 6535689), (det, 0), ],
    [(x, 5415130), (y, 5924787), (det, 0), ],
    [(x, 5434679), (y, -6698471), (det, 0), ],
    [(x, 1947015), (y, 2687140), (det, 0), ],
    [(x, -1465932), (y, -2369939), (det, 0), ],
    [(x, -878321), (y, 592918), (det, 0), ],
    [(x, 2453746), (y, 1490833), (det, 0), ],
    [(x, 8542906), (y, -7106447), (det, 0), ],
    [(x, 4529684), (y, 7382072), (det, 0), ],
    [(x, -3268026), (y, 1245240), (det, 0), ],
    [(x, 4789003), (y, 259925), (det, 0), ],
    [(x, -918567), (y, 8543703), (det, 0), ],
    [(x, 9082970), (y, -1572648), (det, 0), ],
    [(x, -9215055), (y, -1521424), (det, 0), ],
    [(x, 235449), (y, 9414486), (det, 0), ],
    [(x, -3968015), (y, 42512), (det, 0), ],
    [(x, -5044661), (y, -5916327), (det, 0), ],
    [(x, 4497123), (y, 2857966), (det, 0), ],
    [(x, 8899262), (y, -2801676), (det, 0), ],
]
for test in tests:
    result = summarizer.solve(test)
    x_val = result[0][1]
    y_val = result[1][1]
    print(f"x = {x_val}")
    print(f"y = {y_val}")
